{"version":3,"sources":["utils/utils.js","MonthComponent.js","App.js","serviceWorker.js","index.js"],"names":["getMonthFromDate","date","Date","getMonth","usersByMonth","arr","month","usersByMonthCount","map","user","dob","User","styled","li","UsersBlock","ol","MonthWrapper","div","props","count","LabelText","p","monthNames","MonthComponent","users","index","key","firstName","lastName","MainWrapper","App","useState","setUsers","getUsers","fetch","then","response","json","data","useEffect","monthsList","forEach","concat","filter","item","i","ar","indexOf","sort","a","b","createMonthsList","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0MAAaA,EAAmB,SAACC,GAC/B,OAAO,IAAIC,KAAKD,GAAME,WAAa,GAGxBC,EAAe,WAA0B,IAAzBC,EAAwB,uDAAlB,GAAIC,EAAc,uDAAN,EACzCC,EAAoB,EAOxB,OANAF,EAAIG,KAAI,SAACC,GACP,OAAIH,IAAUN,EAAiBS,EAAKC,KAC3BH,IAEFA,KAEFA,G,kgCCPT,IAAMI,EAAOC,IAAOC,GAAV,KAUJC,EAAaF,IAAOG,GAAV,KAcVC,EAAeJ,IAAOK,IAAV,KAOI,SAACC,GACnB,OAAIA,EAAMC,MAAQ,GAAK,GAAKD,EAAMC,MACzB,OACED,EAAMC,MAAQ,GAAK,GAAKD,EAAMC,MAChC,OACED,EAAMC,MAAQ,GAAK,IAAMD,EAAMC,MACjC,QAEA,QAMPL,GAaAM,EAAYR,IAAOS,EAAV,KAGTC,EAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGWC,EAAiB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOlB,EAAY,EAAZA,MACtC,OACE,kBAACU,EAAD,CAAcG,MAAOf,EAAaoB,EAAOlB,IACvC,kBAACc,EAAD,KAAYE,EAAWhB,EAAQ,IAC/B,kBAACQ,EAAD,KACGU,EAAMhB,KAAI,SAACC,EAAMgB,GAChB,OAAInB,IAAUN,EAAiBS,EAAKC,KAEhC,kBAACC,EAAD,CAAMe,IAAKD,GACRhB,EAAKkB,UADR,IACoBlB,EAAKmB,UAIpB,W,wNCzFnB,IAAMC,EAAcjB,IAAOK,IAAV,KA6CFa,EA/BH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTP,EADS,KACFQ,EADE,KAGVC,EAAW,kBAPjBC,MACE,kEACAC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAMfF,MAAK,SAACG,GACjBN,EAASM,OAGbC,qBAAU,WACRN,MACC,IAaH,OACE,kBAACJ,EAAD,KAZuB,WACvB,IAAIW,EAAa,GAOjB,OANAhB,EAAMiB,SAAQ,SAAChC,GACb+B,EAAaA,EAAWE,OAAO1C,EAAiBS,EAAKC,SAE1C8B,EACVG,QAAO,SAACC,EAAMC,EAAGC,GAAV,OAAiBA,EAAGC,QAAQH,KAAUC,KAC7CG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAMnBC,GAAmB3C,KAAI,SAACF,EAAOmB,GAC9B,OAAO,kBAAC,EAAD,CAAgBC,IAAKD,EAAOD,MAAOA,EAAOlB,MAAOA,SCjC5C8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wICZN,IAAMC,EAAcC,YAAH,KAMjBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAACJ,EAAD,OAEFK,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47d956a6.chunk.js","sourcesContent":["export const getMonthFromDate = (date) => {\n  return new Date(date).getMonth() + 1;\n};\n\nexport const usersByMonth = (arr = [], month = 0) => {\n  let usersByMonthCount = 0;\n  arr.map((user) => {\n    if (month === getMonthFromDate(user.dob)) {\n      return usersByMonthCount++;\n    }\n    return usersByMonthCount;\n  });\n  return usersByMonthCount;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { getMonthFromDate, usersByMonth } from \"./utils/utils\";\n\nconst User = styled.li`\n  display: flex;\n  width: 150px;\n  border: 1px solid black;\n  padding: 1px;\n  margin: 3px;\n  border-radius: 5px;\n  text-align: center;\n`;\n\nconst UsersBlock = styled.ol`\n  position: absolute;\n  top: 0px;\n  left: 100px;\n  flex-wrap: wrap;\n  margin: 0;\n  display: none;\n  padding: 0;\n  @media (min-width: 1366px) {\n    top: 30px;\n    left: 0px;\n  }\n`;\n\nconst MonthWrapper = styled.div`\n  width: 100px;\n  margin: 10px;\n  text-align: center;\n  border-radius: 10px;\n  border: 2px solid black;\n  position: relative;\n  background-color: ${(props) => {\n    if (props.count > 0 && 2 >= props.count) {\n      return \"gray\";\n    } else if (props.count > 2 && 6 >= props.count) {\n      return \"blue\";\n    } else if (props.count > 7 && 10 >= props.count) {\n      return \"green\";\n    } else {\n      return \"red\";\n    }\n  }};\n  outline: none;\n  &:hover {\n    border: 2px solid yellow;\n    ${UsersBlock} {\n      display: flex;\n    }\n  }\n  :last-child {\n    @media (min-width: 1366px) {\n      ol {\n        top: 30px;\n        left: -60px;\n      }\n    }\n  }\n`;\nconst LabelText = styled.p`\n  margin: 3px auto;\n`;\nconst monthNames = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport const MonthComponent = ({ users, month }) => {\n  return (\n    <MonthWrapper count={usersByMonth(users, month)}>\n      <LabelText>{monthNames[month - 1]}</LabelText>\n      <UsersBlock>\n        {users.map((user, index) => {\n          if (month === getMonthFromDate(user.dob)) {\n            return (\n              <User key={index}>\n                {user.firstName} {user.lastName}\n              </User>\n            );\n          } else {\n            return null;\n          }\n        })}\n      </UsersBlock>\n    </MonthWrapper>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { MonthComponent } from \"./MonthComponent\";\nimport { getMonthFromDate } from \"./utils/utils\";\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 1366px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n`;\n\nconst fetchUsers = () =>\n  fetch(\n    \"https://yalantis-react-school-api.yalantis.com/api/task0/users\"\n  ).then((response) => response.json());\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n\n  const getUsers = () =>\n    fetchUsers().then((data) => {\n      setUsers(data);\n    });\n\n  useEffect(() => {\n    getUsers();\n  }, []);\n\n  const createMonthsList = () => {\n    let monthsList = [];\n    users.forEach((user) => {\n      monthsList = monthsList.concat(getMonthFromDate(user.dob));\n    });\n    let unique = monthsList\n      .filter((item, i, ar) => ar.indexOf(item) === i)\n      .sort((a, b) => a - b);\n    return unique;\n  };\n\n  return (\n    <MainWrapper>\n      {createMonthsList().map((month, index) => {\n        return <MonthComponent key={index} users={users} month={month} />;\n      })}\n    </MainWrapper>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    background-color: lightgray;\n  }\n`;\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <GlobalStyle />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}